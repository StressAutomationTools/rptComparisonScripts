###############################################################################
#
# Strength script
#
# created by Jens M Hebisch
#
# Version 0.2
# 0.2: script made more robust by dealing with more abnormal cases
#
# This script is intended to calculate strength RFs from rpt files.
#
# use: perl Strength.pl sessionFile allowableFile rptFile
#
# sessionFile:
# Session file generated by Patran containing the Elements grouped by 
# applicable allowable
# 
# allowableFile:
# File containing Group names and allowables. Tab seperated with one group
# per line
#
# rptFile:
# rpt file created by patran. Sorted by load cases, containing Elements and
# von Mises stresses
#
# outputs:
# CriticalCases.txt: A file listing cases that have low RFs
# ElementsWithLowRFs.ses: A session file containing a group "Low RF Elements"
# which contains all the elements that have low RFs
# RF_Summary.txt: A file containing a matrix of all the Results (tab separated)
#
###############################################################################
use warnings;
use strict;
use POSIX;

my ($session, $allowables, $rpt) = @ARGV;
my %elements;
open(LOG, ">", "Strength_Warnings.log");

sub processCommand{
	my @lines = @_;
	my $command;
	foreach my $line (@lines){
		$command = $command.$line;
	}
	$command =~ s/\"\"//g;
	$command =~ m/\"(.*)\",\s*\"(.*)\"/;
	my $GroupName = $1;
	my $list = $2;
	my @parts = split(" ",$list);
	my $process = 0;
	my @EIDS;
	foreach my $part (@parts){
		if($part =~ m/^([a-z]*)$/i){
			if($part eq "Element"){
				$process = 1;
			}
			else{
				$process = 0;
			}
		}
		elsif($process){
			if($part =~ m/(\d+):(\d+):(\d+)/){
				my $start = $1;
				my $end = $2;
				my $incr = $3;
				for(my $n = $start; $n <= $end; $n = $n + $incr){
					if($elements{$n}){
						print LOG "***WARNING $n occurs in more than one group\n";
						print LOG "Will only be processed in the last group\n";
					}
					$elements{$n} = $GroupName;
				}
			}
			elsif($part =~ m/(\d+):(\d+)/){
				my $start = $1;
				my $end = $2;
				for(my $n = $start; $n <= $end; $n++){
					if($elements{$n}){
						print LOG "***WARNING $n occurs in more than one group\n";
						print LOG "Will only be processed in the last group\n";
					}
					$elements{$n} = $GroupName;
				}
			}
			elsif($part =~ m/(\d+)/){
				if($elements{$1}){
					print LOG "***WARNING $1 occurs in more than one group\n";
					print LOG "Will only be processed in the last group\n";
				}
				$elements{$1} = $GroupName;
			}
		}
	}
}

#read session file
my %groups;
my @lines = ();
open(SES, "<", $session);
while(<SES>){
	my $line = $_;
	$line =~ s/\@//g;
	$line =~ s/ \/\/ //g;
	$line =~ s/\r\n//g;
	chomp($line);
	if($line =~ m/^\$/ or $line =~ m/^\w/){
		if(@lines){
			my $com =processCommand(@lines);
			@lines = ();
		}
		if($line =~ m/ga_group_entity_add/){
			push(@lines,$line);
		}
	}
	elsif(@lines){
		push(@lines,$line);
	}
}
if(@lines){
	my $com =processCommand(@lines);
}
close(SES);

#read allowables
my %allowables;
open(ALLOW, "<", $allowables);
while(<ALLOW>){
	my $line = $_;
	$line =~ s/\r//g;
	chomp($line);
	my @parts = split("\t", $line);
	$allowables{$parts[0]} = $parts[1];
}
close(ALLOW);

#read rpt file
my %critElms;
my %critLCs;
my %values;
my %RFs;
my %SCID;
my $SC;
open(RPT, "<", $rpt);
open(CE, ">", "CriticalElmCase.txt");
print CE "Element\tCase\tAllowable\tValue\tRF\n";
while(<RPT>){
	if(m/\s+Load Case:\s+SC(\d+):\s(.*), A\d+:Static Subcase/){
		$SC = $1;
		$SCID{$SC} = $2;
	}
	elsif(m/^\s+(\d+)\s+(\S+)(\s*)$/){
		my $EID = $1;
		my $value = $2;
		if($elements{$EID}){
			if(not($values{$EID}{$SC}) or abs($value) > abs($values{$EID}{$SC})){
				$values{$EID}{$SC} = $value;
				if($allowables{$elements{$EID}}){
					my $allowable = $allowables{$elements{$EID}};
					if(not($value == 0)){
						my $RF = abs($allowable/$value);
						$RFs{$EID}{$SC} = $RF;
						if($RF < 1){
							$critElms{$EID} = 1;
							$critLCs{$SC} = 1;
							print CE $EID."\t".$SC."\t".$allowable."\t".$value."\t".$RF."\n";
						}
					}
					else{
						my $RF = abs($allowable/0.00000001);
						$RFs{$EID}{$SC} = $RF;
					}
				}
				else{
					print LOG "***WARNING No allowable defined for group $elements{$EID}\n";
				}
			}
		}
		else{
			print LOG "***WARNING Element $EID does not have an allowable defined\n";
		}
	}
}
close(RPT);

#print critical cases
open(CC, ">", "CriticalCases.txt");
print CC "SUBCASE ID\tLOADCASE\n";
my @cases = sort({$a <=> $b} keys(%critLCs));
foreach my $case (@cases){
	print CC $case."\t".$SCID{$case}."\n";
}
close(CC);

#print low RF group
open(LRF, ">", "ElementsWithLowRFs.ses");
print LRF "sys_poll_option( 2 )\n";
my @EIDs = sort({$a <=> $b} keys(%critElms));
print LRF "ga_group_create( \"Low RF Elements\" )\n";
print LRF "ga_group_entity_add( \"Low RF Elements\",  \@\n";
print LRF "\" Element ";
foreach my $EID (@EIDs){
	print LRF "\" \/\/ \@\n\"$EID ";
}
print LRF "\" )\n";
print LRF "sys_poll_option( 0 )\n";

#print Results Matrix
open(RFM, ">", "RF_Summary.txt");
@EIDs = sort({$a <=> $b} keys(%RFs));
@cases = sort({$a <=> $b} keys(%SCID));
print RFM "\t\t";
foreach my $case (@cases){
	print RFM "$case\t$SCID{$case}\t"
}
print RFM "\nEID\tAllowable\t";
foreach my $case (@cases){
	print RFM "Value\tRF\t";
}
print RFM "\n";
foreach my $EID (@EIDs){
	print RFM "$EID\t$allowables{$elements{$EID}}";
	foreach my $case (@cases){
		print RFM "\t$values{$EID}{$case}\t";
		my $value = floor(100*$RFs{$EID}{$case})/100;
		print RFM $RFs{$EID}{$case};
	}
	print RFM "\n";
}
